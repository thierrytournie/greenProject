<?php

/**
 * @file
 */

/**
 * Implements hook_permission().
 */
function green_alimentation_permission() {
  return array(
    'create alimentation profile' => array(
      'title' => t('Create alimentation profile'),
      'description' => t('Allow users to add/modify alimentation profile.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function green_alimentation_menu() {
  $items['profil/alimentation/edit'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Mon Alimentation',
    'page callback' => 'green_alimentation_page',
    'page arguments' => array('alimentation'),
    'access arguments' => array('create alimentation profile'),
    'file' => 'green_alimentation.pages.inc',
  );
  
  $items['alimentation/%'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Alimentation',
    'page callback' => 'green_alimentation_page_view',
    'page arguments' => array(1),
    'file' => 'green_alimentation.pages.inc',
    'access callback' => TRUE,
  );
   
  return $items;
}

/**
 * Implements hook_green_user_score().
 */
function green_alimentation_green_user_score($user_name){    
  // Replacement of underscors
  $user_name = str_replace('_',' ',$user_name);
  $user = user_load_by_name($user_name); 
  
  if(!$user) {
      return false;
  }
  
  $node_type = 'alimentation';
  // Search for an existing alimentation for the current user.
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $node_type)
      ->propertyCondition('status', TRUE)
      ->propertyCondition('uid', $user->uid)
      ->execute();

  // If the user has no alimentation node yet
  if (empty($results['node'])) {
     return false;
  }
  
  else {
    // Load the user's alimentation node.
    $node = node_load(reset($results['node'])->nid);
  }
  
  $score = 0;
    // Diet type field
    if(isset($node->field_type_de_regime['und'])) {
        switch($node->field_type_de_regime['und'][0]['value']) {
            case 'Végétarien' : 
                $score += 30;
                break;
            case 'Végétalien' : 
                $score += 50;
                break;
        }
    }
    // Fish consumption 
    if(isset($node->field_conso_poissons['und'])) {        
        switch($node->field_conso_poissons['und'][0]['value']) {
            case '0' :
                $score += 20;
                break;
            case '1' : 
                $score += 14;
                break;
            case '2' : 
                $score += 10;
                break;
            case '3' : 
                $score += 6;
                break;
            case '4' : 
                $score += 2;
                break;
        }
    }
    return $score;
}

/**
 * Implements hook_user_view_alter().
 */
function green_alimentation_node_view_alter(&$build) {
  // Testing the node type
  if($build['#bundle'] == 'alimentation') {
      $path = current_path();
      $path = drupal_get_path_alias($path);
      $arrayPath = explode('/', $path);
      $username=$arrayPath[1];

      // We build the menu for the current username
      $link = green_user_link_menu($username);
      
      // Calculate and display the score
      $score = green_alimentation_green_user_score($username);
      $build['text'] = array(
      '#markup' => '<p class="score"> Score : ' . $score . '</p>',
      '#weight' => -10,
      );
      $build = array_merge($build,$link);
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function green_alimentation_form_alimentation_node_form_alter(&$form, &$form_state) {
  $form_state['redirect'] = 'node/1';
  $form['actions']['submit']['#submit'][] = 'green_alimentation_form_alimentation_node_submit';
  //dsm($form);
  $form['#validate'][] = 'green_alimentation_form_alimentation_node_validate';
}

/**
 * Change form redirection
 */
function green_alimentation_form_alimentation_node_submit($form, &$form_state) { 
  global $user; 
  // Convertion user name string to url with pathauto
  if (module_exists('pathauto')) {
      module_load_include('inc', 'pathauto', 'pathauto');
      $user_name =  pathauto_cleanstring($user->name);  
      $form_state['redirect'] = 'alimentation/'.$user_name; 
  }
}

/**
 * Insert badges in the database when it's necessary 
 */
function green_alimentation_form_alimentation_node_validate($form, &$form_state) { 
  global $user; 
  // Test the field value
  if($form_state['values']['field_type_de_regime']['und'][0]['value']=='Végétarien') {
    // Test if the user already has the badge
    $result = db_select('users_badge', 'ub')
      ->fields('ub')
      ->condition('badge_id', 0 , '=')
      ->condition('user_id', $user->uid , '=')
      ->execute()
      ->rowCount();
    // If the user do not have the badge we give him  
    if($result == 0) {
      db_insert('users_badge')
      ->fields(array(
        'badge_id' => 0,
        'user_id' => $user->uid,
      ))
      ->execute();
    }
  }
}
