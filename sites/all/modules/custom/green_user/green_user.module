<?php

/**
 * @file
 */

/**
 * Implements hook_block_info().
 */
function green_user_block_info() {
  $blocks['account'] = array(
    'info' => t('Liens d\'access à mon compte'),
    'status' => TRUE,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function green_user_block_view($delta = '') {
  // You have to hide the block when the user is not logged in (In drupal block configuration)
  global $user;
  if(user_is_logged_in($user)) {
    // Convertion user name string to url with pathauto
    if (module_exists('pathauto')) {
        module_load_include('inc', 'pathauto', 'pathauto');
        $user_name =  pathauto_cleanstring($user->name);  
    }
    switch ($delta) {
        case 'account':
        $block['content'] = theme('account_block', array('username' => $user_name));
        break;  
    }
    return $block;
  } else {
    return false;
  }
  
}

/**
 * Implements hook_block_view_alter().
 *
 */
function green_user_block_view_alter(&$data, $block) {
    global $user;
    // Useful to show the login block everywhere 
    if($block->delta == 'login'){
        $data['content'] = drupal_get_form('user_login_block');
    }
}

/**
 * Implements hook_theme().
 */
function green_user_theme() {
  return array(
    'account_block' => array(
      'variables' => array(),
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function green_user_form_user_profile_form_alter(&$form, &$form_state) {
  // Merge the main profile form to the user form
  if (($type = profile2_get_types('main')) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], 'main');
      if (empty($profile)) {
        $profile = profile_create(array('type' => 'main', 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Implements hook_menu().
 */
function green_user_menu() {
  $items['profil/edit'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Mon Profil',
    'page callback' => 'green_user_page',
    'access callback' => TRUE,
    'file' => 'green_user.pages.inc',
  );
  
  $items['profil/%'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Profil',
    'page callback' => 'green_user_page_view',
    'page arguments' => array(1),
    'file' => 'green_user.pages.inc',
    'access callback' => TRUE,
  );
 
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function green_user_form_alter(&$form, &$form_state, $form_id) {
  foreach($form as $field) {
    if(is_array($field) && isset($field['#group'])) {           
      if($field['#group'] == 'additional_settings'){  
          $field['#access'] = false;
      } 
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function green_user_form_user_register_form_alter(&$form, &$form_state) {
  $form['account']['name']['#description'] = t('Les espaces sont autorisés ; la ponctuation n\'est pas autorisée à l\'exception des traits d\'union.');
  $form['#validate'][] = 'green_user_register_form_validate';
}

/**
 * Username register validation
 */
function green_user_register_form_validate($form, &$form_state) {
    // If the username have a . ou ' charater an error is set
    if (preg_match("/'|\.|_/",$form_state['values']['name'])) {
    form_set_error('name', t('Il y a un charactère interdit dans votre nom d\'utilisateur.'));
  }
}


/**
 * Implements hook_menu_alter().
 */
function green_user_menu_alter(&$items) {
  $items['user/%user/edit/main']['access callback'] = FALSE;
  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;
  
}

/**
 * Implements hook_user_view_alter().
 */
function green_user_user_view_alter(&$build) {
  global $user; 

  // Deleting history information
  if (isset($build['summary'])) {
      unset($build['summary']);
  }
  
  $path = current_path();
  $path = drupal_get_path_alias($path);
  $arrayPath = explode('/', $path);
  $username=$arrayPath[1];
  
  
  $link = green_user_link_menu($username);
  $score = green_user_score($username);
  
  $build['text'] = array(
      '#markup' => '<p class="score"> Score Global : ' . $score . '</p>',
      '#weight' => -10,
      );
  
  $build['user_picture']['#title'] = t('user picture');
  $build = array_merge($build,$link);
}

/**
 * Generate the link menu for users
 */
function green_user_link_menu($username) {
  $build=array();  
  
  $build['ul'] = array(
    '#markup' => '<ul class="profil">',
    '#weight' => -999,
  );
  
  $build['profil'] = array(
    '#type' => 'link',
    '#title' => t('Profil'),
    '#href' => 'profil/'.$username,
    '#weight' => -810,
    '#prefix' => '<li>',
    '#suffix' => '</li>',
  );
    
  $build['alimentation'] = array(
    '#type' => 'link',
    '#title' => t('Alimentation'),
    '#href' => 'alimentation/'.$username,
    '#weight' => -800,
    '#prefix' => '<li>',
    '#suffix' => '</li>',
  );
   
  $build['travel'] = array(
    '#type' => 'link',
    '#title' => t('Déplacements'),
    '#href' => 'travel/'.$username,
    '#weight' => -750,
    '#prefix' => '<li>',
    '#suffix' => '</li>',
  );
  
  $build['endul'] = array(
    '#markup' => '</ul>',
    '#weight' => -500,
  );
  
  return $build;
}

/*
 * Return the global score of user
 */
function green_user_score($user_name) {
    $userScore = 0;
    
    // Get all the score and sum them
    $scores = module_invoke_all('green_user_score', $user_name );
    foreach($scores as $score) {
        $userScore += $score;
    }
    return $userScore;
}

/**
 * Implements hook_user_view_alter().
 */
function green_user_node_view_alter(&$build) {
  // Testing the node type
  if($build['#bundle'] == 'travel') {
      $path = current_path();
      $path = drupal_get_path_alias($path);
      $arrayPath = explode('/', $path);
      $username=$arrayPath[1];      
      // We build the menu for the current username
      $link = green_user_link_menu($username);
      
      // Calculate and display the score
      $score = green_travel_green_user_score($username);
      $build['text'] = array(
      '#markup' => '<p class="score"> Score : ' . $score . '</p>',
      '#weight' => -10,
      );
      
      $build = array_merge($build,$link);
  }
}